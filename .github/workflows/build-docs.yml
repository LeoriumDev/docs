name: Build docs

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Check config.json exists or create default
        id: config-check
        run: |
          if [ ! -f "config.json" ]; then
            echo "Config file not found, creating empty array"
            echo "[]" > config.json
            echo "has_config=false" >> $GITHUB_ENV
          else
            echo "has_config=true" >> $GITHUB_ENV
          fi

      - name: Build and Copy Documentation
        if: env.has_config == 'true'
        run: |
          CONFIG=$(cat config.json)
          echo "Config content: $CONFIG"

          # Check if config is empty array
          if [ "$CONFIG" = "[]" ]; then
            echo "Config is empty, nothing to build"
            exit 0
          fi

          # Iterate through the repositories
          echo "$CONFIG" | jq -c '.[]' | while read -r REPO; do
            # Extract the values from the JSON object
            NAME=$(echo "$REPO" | jq -r '.name')
            REPOSITORY=$(echo "$REPO" | jq -r '.repository')
            DOCS_PATH=$(echo "$REPO" | jq -r '.docsPath')
            OUTPUT_PATH=$(echo "$REPO" | jq -r '.outputPath')

            echo "Building documentation for $NAME ($REPOSITORY)"

            # Checkout the repository
            git clone --depth 1 "https://github.com/$REPOSITORY" "$NAME"

            # Debug: List directory structure before build
            echo "Directory structure before build:"
            find "$NAME" -type d | sort

            # Build the documentation
            cd "$NAME/$DOCS_PATH"
            npm install
            npm run build
            cd ../../..

            # Debug: List directory structure after build
            echo "Directory structure after build:"
            find "$NAME" -type d | sort

            # Debug: Check if build directory exists
            BUILD_DIR="$NAME/$DOCS_PATH/build"
            if [ ! -d "$BUILD_DIR" ]; then
              echo "Warning: Build directory $BUILD_DIR does not exist!"
              
              # Try to find where the build output might be
              echo "Searching for possible build directories:"
              find "$NAME" -name "build" -type d
              find "$NAME" -name "dist" -type d
              find "$NAME" -name "out" -type d
              
              # Check package.json for build script
              echo "Checking build script in package.json:"
              cat "$NAME/$DOCS_PATH/package.json" | grep -A 5 '"scripts"'
              
              # Try to continue with a best guess if we can find a build directory
              POSSIBLE_BUILD=$(find "$NAME" -name "build" -type d | head -n 1)
              if [ -n "$POSSIBLE_BUILD" ]; then
                echo "Found possible build directory: $POSSIBLE_BUILD"
                BUILD_DIR="$POSSIBLE_BUILD"
              else
                POSSIBLE_BUILD=$(find "$NAME" -name "dist" -type d | head -n 1)
                if [ -n "$POSSIBLE_BUILD" ]; then
                  echo "Found possible dist directory: $POSSIBLE_BUILD"
                  BUILD_DIR="$POSSIBLE_BUILD"
                else
                  echo "Error: Could not find any build output for $NAME"
                  continue
                fi
              fi
            fi

            # Create the output directory
            mkdir -p "$OUTPUT_PATH"

            # Copy the built documentation to the output directory
            echo "Copying from $BUILD_DIR/* to $OUTPUT_PATH/"
            if [ -d "$BUILD_DIR" ] && [ "$(ls -A "$BUILD_DIR")" ]; then
              cp -r "$BUILD_DIR/"* "$OUTPUT_PATH/" || echo "Warning: Copy failed, but continuing"
            else
              echo "Error: No files found in build directory $BUILD_DIR"
            fi

            # Clean up the checked-out repository
            rm -rf "$NAME"
          done

      - name: Commit and Push to origin
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add .
          git commit -m "Update documentation" -a || echo "No changes to commit"
          git push origin main