name: Build docs

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Check config.json exists or create default
        id: config-check
        run: |
          if [ ! -f "config.json" ]; then
            echo "Config file not found, creating empty array"
            echo "[]" > config.json
            echo "has_config=false" >> $GITHUB_ENV
          else
            echo "has_config=true" >> $GITHUB_ENV
            cat config.json
          fi

      - name: Build and Copy Documentation
        if: env.has_config == 'true'
        run: |
          # Store the absolute path of the workspace
          WORKSPACE_DIR=$(pwd)
          echo "Workspace directory: $WORKSPACE_DIR"
          
          CONFIG=$(cat config.json)
          echo "Config content: $CONFIG"

          # Check if config is empty array
          if [ "$CONFIG" = "[]" ]; then
            echo "Config is empty, nothing to build"
            exit 0
          fi

          # Create a flag to track if any build succeeded
          BUILD_SUCCESS=false

          # Iterate through the repositories
          echo "$CONFIG" | jq -c '.[]' | while read -r REPO; do
            # Extract the values from the JSON object
            NAME=$(echo "$REPO" | jq -r '.name')
            REPOSITORY=$(echo "$REPO" | jq -r '.repository')
            DOCS_PATH=$(echo "$REPO" | jq -r '.docsPath')
            OUTPUT_PATH=$(echo "$REPO" | jq -r '.outputPath')

            echo "===== Processing repository: $NAME ($REPOSITORY) ====="
            
            # Use absolute paths
            REPO_DIR="$WORKSPACE_DIR/$NAME"
            DOCS_DIR="$REPO_DIR/$DOCS_PATH"
            OUTPUT_DIR="$WORKSPACE_DIR/$OUTPUT_PATH"
            
            echo "Repository directory: $REPO_DIR"
            echo "Docs directory: $DOCS_DIR"
            echo "Output directory: $OUTPUT_DIR"
            
            # Checkout the repository with error handling
            echo "Cloning repository..."
            if ! git clone --depth 1 "https://github.com/$REPOSITORY" "$REPO_DIR"; then
              echo "Error: Failed to clone repository $REPOSITORY"
              continue
            fi

            # Check if the repository was cloned successfully
            if [ ! -d "$REPO_DIR" ]; then
              echo "Error: Directory $REPO_DIR does not exist after git clone"
              continue
            fi

            # List contents of the cloned repository
            echo "Contents of cloned repository:"
            ls -la "$REPO_DIR"

            # Check if docs path exists
            if [ ! -d "$DOCS_DIR" ]; then
              echo "Error: Docs path $DOCS_DIR does not exist"
              continue
            fi

            # Check if package.json exists in docs path
            if [ ! -f "$DOCS_DIR/package.json" ]; then
              echo "Error: package.json not found in $DOCS_DIR"
              continue
            fi

            # Show package.json content
            echo "package.json content:"
            cat "$DOCS_DIR/package.json"

            # Try to build the documentation
            echo "Building documentation..."
            cd "$DOCS_DIR"
            
            # Install dependencies with error handling
            if ! npm install; then
              echo "Error: npm install failed"
              cd "$WORKSPACE_DIR"
              continue
            fi
            
            # Run build with error handling
            if ! npm run build; then
              echo "Error: npm run build failed"
              cd "$WORKSPACE_DIR"
              continue
            fi
            
            # Check if build directory exists in the docs directory
            BUILD_DIR="$DOCS_DIR/build"
            if [ -d "$BUILD_DIR" ] && [ "$(ls -A "$BUILD_DIR" 2>/dev/null)" ]; then
              echo "Found build directory at $BUILD_DIR"
              
              # Create the output directory
              mkdir -p "$OUTPUT_DIR"
              
              # Copy the built documentation to the output directory
              echo "Copying from $BUILD_DIR/* to $OUTPUT_DIR/"
              cp -r "$BUILD_DIR/"* "$OUTPUT_DIR/"
              
              if [ $? -eq 0 ]; then
                echo "Copy completed successfully"
                BUILD_SUCCESS=true
              else
                echo "Error: Failed to copy files"
              fi
            else
              echo "Build directory not found at $BUILD_DIR"
              echo "Listing contents of $DOCS_DIR:"
              ls -la "$DOCS_DIR"
              
              # Try to find build directory elsewhere
              echo "Searching for build output in $REPO_DIR:"
              BUILD_DIRS=$(find "$REPO_DIR" -type d \( -name "build" -o -name "dist" -o -name "out" -o -name "_site" -o -name "public" \) 2>/dev/null || echo "")
              
              if [ -n "$BUILD_DIRS" ]; then
                echo "Found build directories:"
                echo "$BUILD_DIRS"
                
                # Try to copy from each potential build directory
                for DIR in $BUILD_DIRS; do
                  if [ -d "$DIR" ] && [ "$(ls -A "$DIR" 2>/dev/null)" ]; then
                    echo "Copying from $DIR/* to $OUTPUT_DIR/"
                    mkdir -p "$OUTPUT_DIR"
                    cp -r "$DIR/"* "$OUTPUT_DIR/"
                    
                    if [ $? -eq 0 ]; then
                      echo "Copy completed successfully"
                      BUILD_SUCCESS=true
                      break
                    else
                      echo "Error: Failed to copy files from $DIR"
                    fi
                  else
                    echo "Directory $DIR is empty or doesn't contain files"
                  fi
                done
              else
                echo "No build directories found"
              fi
            fi
            
            # Return to workspace directory
            cd "$WORKSPACE_DIR"
            
            # Clean up the checked-out repository
            rm -rf "$REPO_DIR"
          done

          # Exit with error if no builds succeeded
          if [ "$BUILD_SUCCESS" = false ]; then
            echo "Error: No documentation was successfully built and copied"
            exit 1
          fi

      - name: Commit and Push to origin
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add .
          git commit -m "Update documentation" -a || echo "No changes to commit"
          git push origin main
